using Microsoft.Data.Sqlite;
using System;
using System.IO;
using System.Linq;

namespace AbfDB
{
    public class AbfDatabase : IDisposable
    {
        private readonly SqliteConnection Connection;
        public readonly string FilePath;

        public AbfDatabase(string databaseFilePath, bool deleteExisting = true)
        {
            FilePath = Path.GetFullPath(databaseFilePath);
            if (deleteExisting && File.Exists(FilePath))
                File.Delete(FilePath);

            Connection = new SqliteConnection($"Data Source={FilePath};");
            Connection.Open();
            CreateTables();
        }

        public override string ToString() => $"ABF SQLite database: {FilePath}";

        public void CreateTables()
        {
            AbfFiles_Create();
            AbfFolders_Create();
        }

        private void AbfFiles_Create()
        {
            const string cmdText = "CREATE TABLE IF NOT EXISTS AbfFiles" +
                "(" +
                    "[Id] INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, " +
                    "[Folder_id] INTEGER NOT NULL, " +
                    "[Filename] TEXT NOT NULL, " +
                    "[Episodes] INTEGER NOT NULL, " +
                    "[Date] INTEGER NOT NULL, " +
                    "[Time] INTEGER NOT NULL, " +
                    "[Stopwatch] INTEGER NOT NULL, " +
                    "[MD5] TEXT NOT NULL" +
                ")";

            using var cmd = Connection.CreateCommand();
            cmd.CommandText = cmdText;
            cmd.ExecuteNonQuery();
        }

        public void Add(AbfSharp.ABFFIO.ABF abf)
        {
            AbfFolders_Insert(abf.FilePath);
            AbfFiles_Insert(abf);
        }

        public void AbfFiles_Insert(AbfSharp.ABFFIO.ABF abf)
        {
            const string cmdText = "INSERT INTO AbfFiles " +
                "(Folder_id, Filename, Episodes, Date, Time, Stopwatch, MD5) " +
                "VALUES (@folder_id, @filename, @episodes, @date, @time, @stopwatch, @md5)";

            using var cmd = new SqliteCommand(cmdText, Connection);
            cmd.Parameters.AddWithValue("folder_id", AbfFolders_Select(Path.GetDirectoryName(abf.FilePath)));
            cmd.Parameters.AddWithValue("filename", Path.GetFileName(abf.FilePath));
            cmd.Parameters.AddWithValue("episodes", abf.Header.lActualEpisodes);
            cmd.Parameters.AddWithValue("date", abf.Header.uFileStartDate);
            cmd.Parameters.AddWithValue("time", abf.Header.uFileStartTimeMS);
            cmd.Parameters.AddWithValue("stopwatch", abf.Header.lStopwatchTime);
            cmd.Parameters.AddWithValue("md5", GetMD5Hash(abf.FilePath));
            cmd.ExecuteNonQuery();
        }

        private void AbfFolders_Create()
        {
            const string cmdText =
                "CREATE TABLE IF NOT EXISTS AbfFolders" +
                "(" +
                    "[Id] INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT, " +
                    "[Folder] TEXT NOT NULL UNIQUE" +
                ")";

            using var cmd = Connection.CreateCommand();
            cmd.CommandText = cmdText;
            cmd.ExecuteNonQuery();
        }

        private void AbfFolders_Insert(string folderPath)
        {
            const string cmdText = "INSERT OR IGNORE INTO AbfFolders (Folder) VALUES (@folder)";
            using var cmd = new SqliteCommand(cmdText, Connection);
            cmd.Parameters.AddWithValue("folder", Path.GetDirectoryName(folderPath));
            cmd.ExecuteNonQuery();
        }

        private int AbfFolders_Select(string folderPath)
        {
            using var cmd = Connection.CreateCommand();
            // TODO: build this programmatically
            cmd.CommandText = $@"SELECT Id FROM AbfFolders WHERE Folder = '{folderPath}';";
            SqliteDataReader reader = cmd.ExecuteReader();

            while (reader.Read())
                return reader.GetInt32(0);

            throw new InvalidOperationException("folder not found in database");
        }

        public void Dispose()
        {
            Connection.Close();
            Connection.Dispose();
        }

        /// <summary>
        /// Return the MD5 hash for a file on the filesystem.
        /// Hashes are identical to those generated by the CertUtil command.
        /// </summary>
        private static string GetMD5Hash(string filePath)
        {
            var md5 = System.Security.Cryptography.MD5.Create();
            using var stream = File.OpenRead(filePath);
            return string.Join("", md5.ComputeHash(stream).Select(x => x.ToString("x2")));
        }
    }
}
