using System;
using System.Diagnostics;
using System.IO;
using System.Security.Cryptography;
using System.Linq;
using AbfDB.Databases;

namespace AbfDB
{
    class Program
    {
        static int AbfsRead = 0;

        static void Main(string[] args)
        {
            string searchFolder;
            if (Debugger.IsAttached)
            {
                searchFolder = @"X:\Data\AT1-Cre-AT2-eGFP";
            }
            else if (args.Length != 1 || !Directory.Exists(args[0]))
            {
                Console.WriteLine("ERROR: command line argument must be a valid search folder");
                return;
            }
            else
            {
                searchFolder = args[0];
            }

            AbfDatabase[] databases = {
                new CsvDatabase("abfdb.csv"),
                new SqliteDatabase("abfdb.sqlite"),
            };

            AddAbfs(searchFolder, databases);
        }

        /// <summary>
        /// Recursively scan the search folder for ABFs and add their records to each database given
        /// </summary>
        private static void AddAbfs(string searchFolder, AbfDatabase[] databases)
        {
            Log(string.Concat(Enumerable.Repeat("#", 80)));
            Log($"[{DateTime.Now}] Starting scan: {searchFolder}");

            Stopwatch stopwatch = Stopwatch.StartNew();

            foreach (string relativePath in Directory.EnumerateFiles(searchFolder, "*.abf", SearchOption.AllDirectories))
            {
                if (relativePath.EndsWith(".abf") == false) // fixes a bug in .NET Framework that's not in .NET Core
                    continue;
                string fullPath = Path.GetFullPath(relativePath);

                try
                {
                    AbfRecord record = ReadAbf(fullPath);
                    foreach (AbfDatabase database in databases)
                        database.Add(record);

                    Console.WriteLine($"ABFs={AbfsRead} Elapsed={stopwatch.Elapsed} Path={fullPath}");
                }
                catch (Exception ex)
                {
                    Console.WriteLine($"EXCEPTION: see log file for details");
                    Log($"\nEXCEPTION: {fullPath}\n{ex}\n");
                }
            }

            Log($"[{DateTime.Now}] Scan finished: Read {AbfsRead} ABFs in {stopwatch.Elapsed}");
        }

        /// <summary>
        /// Log a message to the given text file
        /// </summary>
        private static void Log(string message, string logFilePath = "log.txt")
        {
            using StreamWriter writer = File.AppendText(logFilePath);
            writer.WriteLine(message);
        }

        /// <summary>
        /// Use ABFFIO.DLL to read header values from an ABF file
        /// </summary>
        private static AbfRecord ReadAbf(string fullPath)
        {
            AbfSharp.ABFFIO.ABF abf = new(fullPath);
            AbfsRead += 1;
            return new AbfRecord()
            {
                FullPath = fullPath,
                Episodes = abf.Header.lActualEpisodes,
                Date = abf.Header.uFileStartDate,
                Time = abf.Header.uFileStartTimeMS,
                Stopwatch = abf.Header.lStopwatchTime,
                FileHashMD5 = GetMD5Hash(fullPath),
            };
        }

        /// <summary>
        /// Return the MD5 hash for a file on the filesystem.
        /// Hashes are identical to those generated by the CertUtil command.
        /// </summary>
        private static string GetMD5Hash(string filePath)
        {
            var md5 = MD5.Create();
            using var stream = File.OpenRead(filePath);
            return string.Join("", md5.ComputeHash(stream).Select(x => x.ToString("x2")));
        }
    }
}
